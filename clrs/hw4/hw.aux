\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}对UpBit优化的动机}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}时间效率}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.1}对行查询}{1}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces UpBit对行查询}}{1}}
\newlabel{fig:get_value}{{1}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.2}范围查询}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}空间效率}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}对Update BitVectors的正确认识}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}对UpBit优化的方法}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}树状数组}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces 树状数组 ({\bf  Fenwick Tree})}}{2}}
\newlabel{fig:bit}{{2}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}使用树状数组作为UpBit的组织形式}{2}}
\@writefile{toc}{\contentsline {section}{\numberline {3}实验结果}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}对行查询效率对比}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces 对行查询效率比较图}}{3}}
\newlabel{fig:row}{{3}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}范围查询效率对比}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces 范围查询效率比较图}}{3}}
\newlabel{fig:query}{{4}{3}}
\gdef\minted@oldcachelist{,
  default-pyg-prefix.pygstyle,
  default.pygstyle,
  64FB71C01AE75843B3C6BC2BF278E4AE367073D91C27E5131AE311973FBC5390.pygtex,
  FF2916D6B1011B723732F801B7809235B4C2AA36B2F29CEE4FD7C46966C1AD32.pygtex,
  3771437499E0CF88B99C7512A1A07483B4C2AA36B2F29CEE4FD7C46966C1AD32.pygtex}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}单值修改效率对比}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces 修改操作效率比较图}}{4}}
\newlabel{fig:update}{{5}{4}}
\@writefile{toc}{\contentsline {section}{\numberline {4}结论}{4}}
