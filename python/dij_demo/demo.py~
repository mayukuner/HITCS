#!/usr/bin/env python 
from Tkinter import *
from ttk import *
from tkFont import *
import random

n=6
INF=100000
id = ["T"] + ['V'+chr(i+1 + ord('0')) for i in range(6)]
T=set()
dis=[0]+[INF for i in range(n-1)]
x=[100,300,500,700,500,300]
y=[300,100,100,300,500,500]
edge=[[0,1,0,0,0,1],
      [1,0,1,0,0,1],
      [0,1,0,1,1,0],
      [0,0,1,0,1,1],
      [0,0,1,1,0,1],
      [1,1,1,0,1,0]]

def init_graph():
    for i in range(n):
        for j in range(i+1):
            if edge[i][j]==1:
                edge[i][j]=edge[j][i]=random.randint(1,5)
            else:
                edge[i][j]=edge[j][i]=INF

#maintain the graph
ra=15
def draw_graph():
    for i in range(n):
        for j in range(n):
            if edge[i][j]<INF:
                canvas.create_line(x[i],y[i],x[j],y[j],fill="black")
    for i in range(n):
        canvas.create_oval(x[i]-ra,y[i]-ra,x[i]+ra,y[i]+ra,fill=((i in T) and  "#AAA" or "white"))
        canvas.create_text(x[i],y[i],text=id[i+1])
        if dis[i]<INF:
            for j in range(n):
                if dis[j] + edge[i][j] == dis[i]:
                    canvas.create_line(x[j],y[j],x[i],y[i],fill="blue")
                    canvas.create_oval(x[j]-ra,y[j]-ra,x[j]+ra,y[j]+ra,fill=(j in T) and "#AAA" or "white")
                    canvas.create_oval(x[i]-ra,y[i]-ra,x[i]+ra,y[i]+ra,fill=(i in T) and "#AAA" or "white")
                    canvas.create_text(x[j],y[j],text=id[j+1])
                    canvas.create_text(x[i],y[i],text=id[i+1])
    for i in range(n):
        for j in range(i):
            if edge[i][j]<INF:
                canvas.create_text((x[j]+x[i])/2,(y[j]+y[i])/2,text=str(edge[i][j]))

#maintain the table
def init_table():
    for i in range(len(id)):
        tree.column(id[i], width=100, anchor='center')
        tree.heading(id[i],text=id[i])

def insert_line():
    cur_dis=["INF" for i in range(n)]
    for i in range(n):
        if(dis[i]<INF):
            cur_dis[i]=str(dis[i])
    tree.insert("",0,values=tuple([str([i+1 for i in T]).strip('[]')]+cur_dis))

#maintain the DIJK
def next_DIJK():
    mind=INF
    minu=INF
    for i in range(n):
        if i not in T and dis[i]<mind:
            minu=i
            mind=dis[i]
    T.add(minu)
    for i in range(n):
        if dis[i]>dis[minu]+edge[minu][i]:
            dis[i]=dis[minu]+edge[minu][i]

def next_step():
    next_DIJK()
    insert_line()
    draw_graph()


window=Tk()
window.title("Sample for Dijkstra")
frame = Frame(window)
frame.pack()

#init the canvas
canvas = Canvas(window, width = 800, height = 600, bg = "white")
canvas.pack()

#init graph
init_graph()

#init the table
tree = Treeview(window,columns=tuple(id))
tree.pack()
init_table()

#init the DIJK
next_step()

#init the button
btNext = Button(frame, text = "Next", command = next_step)
btNext.grid(row = 1, column = 1)
btQuit = Button(frame, text = "Quit", command = window.quit)
btQuit.grid(row = 1, column = 2)

window.mainloop()

